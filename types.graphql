# This file contains the GraphQL Types

# All types need to have the three fields id, updatedAt and createdAt like this:

type User implements Node {
  createdAt: DateTime!
  email: String @isUnique
  id: ID! @isUnique
  password: String
  updatedAt: DateTime!
  projects: [Project!]! @relation(name: "ProjectOnUser")
}


# Graphcool has one special type, the File type:

# type File implements Node {
#   contentType: String!
#   createdAt: DateTime!
#   id: ID! @isUnique
#   name: String!
#   secret: String! @isUnique
#   size: Int!
#   updatedAt: DateTime!
#   url: String! @isUnique
# }

type Contract implements Node {
  address: String!
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
  public: Boolean! @defaultValue(value: true)
  abi: Json!
  project: Project @relation(name: "ProjectOnContract")
  connectors: [EthereumContractConnector!]! @relation(name: "ConnectorOnContracts")
  chain: CHAIN! @defaultValue(value: MAINNET)
  description: String
  name: String!
}

type EthereumContractConnector implements Node {
  id: ID! @isUnique
  connector: Connector @relation(name: "EthereumContractOnConnectors")
  contract: Contract @relation(name: "ConnectorOnContracts")
  eventName: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Connector implements Node {
  id: ID! @isUnique
  project: Project! @relation(name: "ConnectorOnProject")
  ethereumContract: EthereumContractConnector @relation(name: "EthereumContractOnConnectors")
  triggers: [Trigger!]! @relation(name: "ConnectorOnTriggers")
  connectorType: CONNECTOR_TYPE! @defaultValue(value: ETHEREUM_CONTRACT)
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Action implements Node {
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
  project: Project! @relation(name: "ActionOnProject")
  service: Service @relation(name: "ServiceOnAction")
  triggers: [Trigger!]! @relation(name: "ActionOnTriggers")
  data: Json
}

type Trigger implements Node {
  createdAt: DateTime!
  id: ID! @isUnique
  title: String
  description: String
  enable: Boolean @defaultValue(value: true)
  updatedAt: DateTime!
  connector: Connector! @relation(name: "ConnectorOnTriggers")
  project: Project! @relation(name: "TriggerOnProject")
  events: [Event!]! @relation(name: "EventOnTrigger")
  taskLogs: [TaskLog!]! @relation(name: "TastLogOnTrigger")
  notifications: [Notification!]! @relation(name: "NotificationOnTrigger")
  action: Action! @relation(name: "ActionOnTriggers")
}

type Project implements Node {
  contracts: [Contract!]! @relation(name: "ProjectOnContract")
  createdAt: DateTime!
  id: ID! @isUnique
  name: String!
  updatedAt: DateTime!
  users: [User!]! @relation(name: "ProjectOnUser")
  triggers: [Trigger!]! @relation(name: "TriggerOnProject")
  connectors: [Connector!]! @relation(name: "ConnectorOnProject")
  actions: [Action!]! @relation(name: "ActionOnProject")
  invitations: [Invitation!]! @relation(name: "InvitationOnProject")
  plan: Plan @relation(name: "ProjectOnPlan")
  notifications: [Notification!]! @relation(name: "NotificationOnProject")
}

type TaskLog implements Node {
  body: String
  code: String!
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
  trigger: Trigger @relation(name: "TastLogOnTrigger")
  event: Event @relation(name: "EventOnTaskLogs")
  duration: Int @defaultValue(value: 0)
}

type Event implements Node {
  createdAt: DateTime!
  id: ID! @isUnique
  payload: Json!
  transactionId: String!
  blockId: String!
  from: String!
  to: String!
  value: String!
  fees: String!
  updatedAt: DateTime!
  trigger: Trigger @relation(name: "EventOnTrigger")
  taskLogs: [TaskLog!]! @relation(name: "EventOnTaskLogs")
}

type Plan implements Node {
  createdAt: DateTime!
  currency: CURRENCY! @defaultValue(value: USD)
  id: ID! @isUnique
  price: Int! @isUnique
  title: String! @isUnique
  updatedAt: DateTime!
  contracts: Int
  executions: Int
  members: Int
  projects: [Project!]! @relation(name: "ProjectOnPlan")
}

type Invitation implements Node {
  createdAt: DateTime!
  email: String!
  id: ID! @isUnique
  project: Project @relation(name: "InvitationOnProject")
  updatedAt: DateTime!
}

type Notification implements Node {
  createdAt: DateTime!
  id: ID! @isUnique
  kind: NOTIFICATION_KIND!
  project: Project @relation(name: "NotificationOnProject")
  trigger: Trigger @relation(name: "NotificationOnTrigger")
  updatedAt: DateTime!
}

type Service implements Node {
  createdAt: DateTime!
  data: Json
  description: String
  endpoint: String! @isUnique
  id: ID! @isUnique
  key: String! @isUnique
  name: String!
  picture: String
  priority: Int @defaultValue(value: 9999)
  actions: [Action!]! @relation(name: "ServiceOnAction")
  updatedAt: DateTime!
}

enum CHAIN {
  HOMESTEAD
  MAINNET
  TESTNET
  KOVAN
}

enum CURRENCY {
  USD
}

enum NOTIFICATION_KIND {
  TRIGGER_DISABLED
  TRIGGER_ERROR
}

enum CONNECTOR_TYPE {
  ETHEREUM_CONTRACT
}